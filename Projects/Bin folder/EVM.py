"""
Оценка среднего времени выполнения команды.

Конвейер процессора включает в себя следующие ступени:
- чтение и дешифрация кода операции
- выборка первого операнда
- выборка второго операнда
- вычисление результата
- запись данных (по адресу второго операнда).

Дешифрация кода операции выполняется за 1 такт.
Первый операнд всегда находится в регистре.
Способы адресации второго операнда регистровая и косвенная.

Вероятность того, что для данного операнда
используется регистровая адресация P1 (0.9; 0.8; 0.6).

Время обращения к регистру 1 такт.
Время обращения к памяти N тактов (2, 5, 10).

И код операции и операнд занимают одно слово памяти.

Поддерживается два типа команд.
Вычисление результата для команд первого типа выполняется за 1 такт
вычисление результата для команд второго типа выполняется за M тактов
(4, 8, 16).
Вероятность того, что текущая команда является командой первого типа P2
(0.9; 0.7; 0.5).

В один момент времени может выполняться:
- чтение из памяти кода операции
- 2 обращения к памяти для чтения или записи в память данных
"""

from random import randint

x = int(input("Желаете ввести данные, или использовать данные по умолчанию? "
              "(1 - default 2 - ввести) - "))
if x == 1:
    N = 10
    P1 = 0.6
    M = 8
    P2 = 0.5
else:
    N = int(input("Введите длительность обращения к"
                  " памяти (N; 2/5/10 тактов): "))
    P1 = float(input("Введите вероятность того, что второй операнд "
                     "берется из регистра (P1; 0.9/0.8/0.6): "))

    M = int(input("Введите длительность вычисления результата операции"
                  " для комманды 2 типа (M; 4/8/16 тактов): "))
    P2 = float(input("Введите вероятность того, что комманда"
                     " является 1 типа (P2; 0.9/0.7/0.5): "))


def Operand2Determ():
    num = randint(1, 10)
    prob = P1 * 10
    if num <= prob:
        return 1
    return N


def Calculation():
    num = randint(1, 10)
    prob = P2 * 10
    if num <= prob:
        return 1
    return M


iterations = int(input(
    ("Введите количество тиков, во время которых будут "
     "происходить вычисления среднего времени выполнения операции - ")))

stage1 = 1
stage2 = 1
timeStage1 = 0
timeStage2 = 0
timeArr = []
time = 0
flag1 = 0
flag2 = 0

for i in range(iterations):
    """
    Конвейер процессора включает в себя следующие ступени:
    - чтение и дешифрация кода операции
    - выборка первого операнда
    - выборка второго операнда
    - вычисление результата
    - запись данных (по адресу второго операнда).
    """

    if stage1 == 6:
        stage1 = 1

    if stage2 == 6:
        stage2 = 1

    if timeStage1 == time:
        match stage1:
            case 1:
                flag1 = timeStage1
                timeStage1 += 1
            case 2:
                timeStage1 += 1
            case 3:
                timeStage1 += Operand2Determ()
            case 4:
                timeStage1 += Calculation()
            case 5:
                timeStage1 += N
                timeArr.append(timeStage1 - flag1)
        stage1 += 1
    else:
        flag1 -= 1

    if stage1 == 2 and stage2 == 1:
        timeStage2 += 1

    if timeStage2 == time:
        match stage2:
            case 1:
                flag2 = timeStage2
                timeStage2 += 1
            case 2:
                timeStage2 += 1
            case 3:
                timeStage2 += Operand2Determ()
            case 4:
                timeStage2 += Calculation()
            case 5:
                timeStage2 += N
                timeArr.append(timeStage2 - flag2)
        stage2 += 1
    else:
        flag2 -= 1

    time += 1

timeAver = round(sum(timeArr) / len(timeArr), 3)

print("При исходных таких исходных данных:")
print(f"N = {N} тактов \nP1 = {P1} \nM = {M} тактов \nP2 = {P2}")
print(f"среднее время выполнения комманды составляет примерно {timeAver}"
      " тиков")
